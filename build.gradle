description = 'Simple Spreadsheet I/O'

buildscript {
    repositories {
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.1.4")
    }
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    repositories {
        mavenCentral()
    }
}

subprojects {

    group = 'com.github.chenjianjx.ssio'
    version = '2.0.0-SNAPSHOT'

    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'pmd'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'


    java {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        withJavadocJar()
        withSourcesJar()
    }


    dependencyManagement {

        def slf4jVersion = "1.7.30"

        dependencies {
            dependency "commons-io:commons-io:2.7"
            dependency "org.apache.commons:commons-lang3:3.11"
            dependency "commons-beanutils:commons-beanutils:1.9.4"
            dependency "org.apache.poi:poi-ooxml:4.1.2"
            dependency "org.apache.commons:commons-csv:1.6"
            dependency "org.slf4j:slf4j-api:${slf4jVersion}"
            dependency 'org.projectlombok:lombok:1.18.22'
            dependency 'org.jsoup:jsoup:1.17.1'

            dependency 'org.junit.jupiter:junit-jupiter:5.6.2'
            dependency 'org.mockito:mockito-core:3.11.2'
            dependency "org.slf4j:slf4j-simple:${slf4jVersion}"
        }
    }


    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    pmd {
        consoleOutput = true

        ruleSetFiles = rootProject.files("pmd-custom-ruleset.xml")
    }

    test {
        useJUnitPlatform()
    }


    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    scm {
                        connection = "scm:git:git://github.com/chenjianjx/ssio.git"
                        developerConnection = "scm:git:ssh://github.com:chenjianjx/ssio.git/${project.name}"
                        url = "https://github.com/chenjianjx/ssio/${project.name}"
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'chenjianjx'
                            name = 'Jian Chen'
                            email = 'chenjianjx@gmail.com'
                        }
                    }
                }

            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}

task testAll {
    dependsOn subprojects*.test
}

jacocoTestReport {
    dependsOn testAll
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
}

jacocoTestCoverageVerification {
    dependsOn testAll
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }
            element = 'CLASS'
            includes = ['org.ssio.api.interfaces.*', 'org.ssio.spi.interfaces.*']
        }
    }
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
}

check.dependsOn jacocoTestCoverageVerification